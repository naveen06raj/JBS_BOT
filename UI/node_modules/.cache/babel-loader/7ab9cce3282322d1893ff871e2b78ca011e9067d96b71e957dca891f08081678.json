{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\sql_ui\\\\src\\\\components\\\\ChatContainer.tsx\",\n  _s = $RefreshSig$();\n// src/components/ChatContainer.tsx\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatHeader from './ChatHeader';\nimport MessageBubble from './MessageBubble';\nimport UserInput from './UserInput';\n// Removed QuoteDisplayProps as it's not directly used here\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContainer = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: uuidv4(),\n    sender: 'AI',\n    text: 'Hello! I am your AI CRM Assistant. How can I help you today?'\n  }\n  // Removed all other initial messages\n  ]);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSendMessage = text => {\n    const newMessage = {\n      id: uuidv4(),\n      sender: 'You',\n      text: text\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n\n    // Simulate AI response - in a real app, this would be an API call\n    setTimeout(() => {\n      let aiResponseText;\n      // Basic logic to simulate a relevant response, you'll replace this with actual API calls\n      if (text.toLowerCase().includes(\"quote\") || text.toLowerCase().includes(\"quotation\")) {\n        // Simulate a quote response for demonstration\n        const quoteDetails = {\n          quotationNumber: 'QOT' + Math.floor(Math.random() * 1000).toString().padStart(3, '0'),\n          status: 'Pending',\n          date: new Date().toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          }),\n          totalAmount: Math.random() * 10000 + 1000,\n          // Random total\n          items: [{\n            itemID: 'ITEM' + Math.floor(Math.random() * 100).toString().padStart(2, '0'),\n            units: Math.floor(Math.random() * 5) + 1,\n            unitPrice: Math.random() * 1000 + 50,\n            total: 0\n          }, {\n            itemID: 'ITEM' + Math.floor(Math.random() * 100).toString().padStart(2, '0'),\n            units: Math.floor(Math.random() * 3) + 1,\n            unitPrice: Math.random() * 500 + 20,\n            total: 0\n          }],\n          leadInfo: 'for ' + (Math.random() > 0.5 ? 'Sunshine Clinic' : 'Global Tech Inc.')\n        };\n        // Calculate totals for items\n        quoteDetails.items.forEach(item => {\n          item.total = item.units * item.unitPrice;\n        });\n        quoteDetails.totalAmount = quoteDetails.items.reduce((sum, item) => sum + item.total, 0);\n        setMessages(prevMessages => [...prevMessages, {\n          id: uuidv4(),\n          sender: 'AI',\n          text: 'Here are some simulated quote details:',\n          quoteDetails: quoteDetails\n        }]);\n        return; // Exit after sending quote\n      } else if (text.toLowerCase().includes(\"hello\") || text.toLowerCase().includes(\"hi\")) {\n        aiResponseText = \"Hello there! How can I assist you with CRM tasks?\";\n      } else {\n        aiResponseText = `I received your message: \"${text}\". I am an AI CRM assistant. Please ask me about quotes, leads, or opportunities for more specific help!`;\n      }\n      setMessages(prevMessages => [...prevMessages, {\n        id: uuidv4(),\n        sender: 'AI',\n        text: aiResponseText\n      }]);\n    }, 1000); // Simulate a 1-second delay for AI response\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '750px',\n      height: '85vh',\n      margin: '20px auto',\n      border: 'none',\n      borderRadius: '8px',\n      display: 'flex',\n      flexDirection: 'column',\n      boxShadow: '0 8px 25px rgba(0,0,0,0.25)',\n      backgroundColor: 'white',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      title: \"AI CRM Assistant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: 1,\n        overflowY: 'auto',\n        padding: '10px 0',\n        backgroundColor: '#f8f9fa',\n        borderBottom: '1px solid #e0e0e0'\n      },\n      children: [messages.map(msg => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: msg\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContainer, \"eu9/8LKuU65Pc881psKOY9HVvtc=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatHeader","MessageBubble","UserInput","v4","uuidv4","jsxDEV","_jsxDEV","ChatContainer","_s","messages","setMessages","id","sender","text","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","newMessage","prevMessages","setTimeout","aiResponseText","toLowerCase","includes","quoteDetails","quotationNumber","Math","floor","random","toString","padStart","status","date","Date","toLocaleDateString","year","month","day","totalAmount","items","itemID","units","unitPrice","total","leadInfo","forEach","item","reduce","sum","style","width","maxWidth","height","margin","border","borderRadius","display","flexDirection","boxShadow","backgroundColor","overflow","children","title","fileName","_jsxFileName","lineNumber","columnNumber","flexGrow","overflowY","padding","borderBottom","map","msg","message","ref","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/Admin/sql_ui/src/components/ChatContainer.tsx"],"sourcesContent":["// src/components/ChatContainer.tsx\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ChatHeader from './ChatHeader';\r\nimport MessageBubble from './MessageBubble';\r\nimport UserInput from './UserInput';\r\nimport { Message } from '../types'; // Removed QuoteDisplayProps as it's not directly used here\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst ChatContainer: React.FC = () => {\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: uuidv4(),\r\n      sender: 'AI',\r\n      text: 'Hello! I am your AI CRM Assistant. How can I help you today?',\r\n    },\r\n    // Removed all other initial messages\r\n  ]);\r\n\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = (text: string) => {\r\n    const newMessage: Message = {\r\n      id: uuidv4(),\r\n      sender: 'You',\r\n      text: text,\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n\r\n    // Simulate AI response - in a real app, this would be an API call\r\n    setTimeout(() => {\r\n      let aiResponseText: string;\r\n      // Basic logic to simulate a relevant response, you'll replace this with actual API calls\r\n      if (text.toLowerCase().includes(\"quote\") || text.toLowerCase().includes(\"quotation\")) {\r\n          // Simulate a quote response for demonstration\r\n          const quoteDetails = {\r\n              quotationNumber: 'QOT' + Math.floor(Math.random() * 1000).toString().padStart(3, '0'),\r\n              status: 'Pending',\r\n              date: new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),\r\n              totalAmount: Math.random() * 10000 + 1000, // Random total\r\n              items: [\r\n                  { itemID: 'ITEM' + Math.floor(Math.random() * 100).toString().padStart(2, '0'), units: Math.floor(Math.random() * 5) + 1, unitPrice: Math.random() * 1000 + 50, total: 0 },\r\n                  { itemID: 'ITEM' + Math.floor(Math.random() * 100).toString().padStart(2, '0'), units: Math.floor(Math.random() * 3) + 1, unitPrice: Math.random() * 500 + 20, total: 0 }\r\n              ],\r\n              leadInfo: 'for ' + (Math.random() > 0.5 ? 'Sunshine Clinic' : 'Global Tech Inc.')\r\n          };\r\n          // Calculate totals for items\r\n          quoteDetails.items.forEach(item => { item.total = item.units * item.unitPrice; });\r\n          quoteDetails.totalAmount = quoteDetails.items.reduce((sum, item) => sum + item.total, 0);\r\n\r\n          setMessages((prevMessages) => [...prevMessages, {\r\n              id: uuidv4(),\r\n              sender: 'AI',\r\n              text: 'Here are some simulated quote details:',\r\n              quoteDetails: quoteDetails\r\n          }]);\r\n          return; // Exit after sending quote\r\n      } else if (text.toLowerCase().includes(\"hello\") || text.toLowerCase().includes(\"hi\")) {\r\n          aiResponseText = \"Hello there! How can I assist you with CRM tasks?\";\r\n      } else {\r\n          aiResponseText = `I received your message: \"${text}\". I am an AI CRM assistant. Please ask me about quotes, leads, or opportunities for more specific help!`;\r\n      }\r\n\r\n\r\n      setMessages((prevMessages) => [...prevMessages, {\r\n          id: uuidv4(),\r\n          sender: 'AI',\r\n          text: aiResponseText,\r\n      }]);\r\n    }, 1000); // Simulate a 1-second delay for AI response\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      width: '100%',\r\n      maxWidth: '750px',\r\n      height: '85vh',\r\n      margin: '20px auto',\r\n      border: 'none',\r\n      borderRadius: '8px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      boxShadow: '0 8px 25px rgba(0,0,0,0.25)',\r\n      backgroundColor: 'white',\r\n      overflow: 'hidden'\r\n    }}>\r\n      <ChatHeader title=\"AI CRM Assistant\" />\r\n      <div style={{\r\n        flexGrow: 1,\r\n        overflowY: 'auto',\r\n        padding: '10px 0',\r\n        backgroundColor: '#f8f9fa',\r\n        borderBottom: '1px solid #e0e0e0'\r\n      }}>\r\n        {messages.map((msg) => (\r\n          <MessageBubble key={msg.id} message={msg} />\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <UserInput onSendMessage={handleSendMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,SAAS,MAAM,aAAa;AACC;AACpC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAY,CAClD;IACEc,EAAE,EAAEP,MAAM,CAAC,CAAC;IACZQ,MAAM,EAAE,IAAI;IACZC,IAAI,EAAE;EACR;EACA;EAAA,CACD,CAAC;EAEF,MAAMC,cAAc,GAAGf,MAAM,CAAiB,IAAI,CAAC;EAEnD,MAAMgB,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA;IAC3B,CAAAA,qBAAA,GAAAF,cAAc,CAACG,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACdiB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,MAAMW,iBAAiB,GAAIP,IAAY,IAAK;IAC1C,MAAMQ,UAAmB,GAAG;MAC1BV,EAAE,EAAEP,MAAM,CAAC,CAAC;MACZQ,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEA;IACR,CAAC;IACDH,WAAW,CAAEY,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC;;IAE5D;IACAE,UAAU,CAAC,MAAM;MACf,IAAIC,cAAsB;MAC1B;MACA,IAAIX,IAAI,CAACY,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIb,IAAI,CAACY,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;QAClF;QACA,MAAMC,YAAY,GAAG;UACjBC,eAAe,EAAE,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;UACrFC,MAAM,EAAE,SAAS;UACjBC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE;YAAEC,IAAI,EAAE,SAAS;YAAEC,KAAK,EAAE,MAAM;YAAEC,GAAG,EAAE;UAAU,CAAC,CAAC;UAChGC,WAAW,EAAEZ,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI;UAAE;UAC3CW,KAAK,EAAE,CACH;YAAEC,MAAM,EAAE,MAAM,GAAGd,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;YAAEW,KAAK,EAAEf,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;YAAEc,SAAS,EAAEhB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE;YAAEe,KAAK,EAAE;UAAE,CAAC,EAC1K;YAAEH,MAAM,EAAE,MAAM,GAAGd,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;YAAEW,KAAK,EAAEf,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;YAAEc,SAAS,EAAEhB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE;YAAEe,KAAK,EAAE;UAAE,CAAC,CAC5K;UACDC,QAAQ,EAAE,MAAM,IAAIlB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,iBAAiB,GAAG,kBAAkB;QACpF,CAAC;QACD;QACAJ,YAAY,CAACe,KAAK,CAACM,OAAO,CAACC,IAAI,IAAI;UAAEA,IAAI,CAACH,KAAK,GAAGG,IAAI,CAACL,KAAK,GAAGK,IAAI,CAACJ,SAAS;QAAE,CAAC,CAAC;QACjFlB,YAAY,CAACc,WAAW,GAAGd,YAAY,CAACe,KAAK,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAEF,IAAI,KAAKE,GAAG,GAAGF,IAAI,CAACH,KAAK,EAAE,CAAC,CAAC;QAExFpC,WAAW,CAAEY,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;UAC5CX,EAAE,EAAEP,MAAM,CAAC,CAAC;UACZQ,MAAM,EAAE,IAAI;UACZC,IAAI,EAAE,wCAAwC;UAC9Cc,YAAY,EAAEA;QAClB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC;MACZ,CAAC,MAAM,IAAId,IAAI,CAACY,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIb,IAAI,CAACY,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClFF,cAAc,GAAG,mDAAmD;MACxE,CAAC,MAAM;QACHA,cAAc,GAAG,6BAA6BX,IAAI,0GAA0G;MAChK;MAGAH,WAAW,CAAEY,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;QAC5CX,EAAE,EAAEP,MAAM,CAAC,CAAC;QACZQ,MAAM,EAAE,IAAI;QACZC,IAAI,EAAEW;MACV,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC;EAED,oBACElB,OAAA;IAAK8C,KAAK,EAAE;MACVC,KAAK,EAAE,MAAM;MACbC,QAAQ,EAAE,OAAO;MACjBC,MAAM,EAAE,MAAM;MACdC,MAAM,EAAE,WAAW;MACnBC,MAAM,EAAE,MAAM;MACdC,YAAY,EAAE,KAAK;MACnBC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,SAAS,EAAE,6BAA6B;MACxCC,eAAe,EAAE,OAAO;MACxBC,QAAQ,EAAE;IACZ,CAAE;IAAAC,QAAA,gBACA1D,OAAA,CAACN,UAAU;MAACiE,KAAK,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvC/D,OAAA;MAAK8C,KAAK,EAAE;QACVkB,QAAQ,EAAE,CAAC;QACXC,SAAS,EAAE,MAAM;QACjBC,OAAO,EAAE,QAAQ;QACjBV,eAAe,EAAE,SAAS;QAC1BW,YAAY,EAAE;MAChB,CAAE;MAAAT,QAAA,GACCvD,QAAQ,CAACiE,GAAG,CAAEC,GAAG,iBAChBrE,OAAA,CAACL,aAAa;QAAc2E,OAAO,EAAED;MAAI,GAArBA,GAAG,CAAChE,EAAE;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAC5C,CAAC,eACF/D,OAAA;QAAKuE,GAAG,EAAE/D;MAAe;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACN/D,OAAA,CAACJ,SAAS;MAAC4E,aAAa,EAAE1D;IAAkB;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV,CAAC;AAAC7D,EAAA,CArGID,aAAuB;AAAAwE,EAAA,GAAvBxE,aAAuB;AAuG7B,eAAeA,aAAa;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}