{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\sql_ui\\\\src\\\\components\\\\ChatContainer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatHeader from './ChatHeader';\nimport MessageBubble from './MessageBubble';\nimport UserInput from './UserInput';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8000/query';\nconst ChatContainer = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: uuidv4(),\n    sender: 'AI',\n    text: 'Hello! I am your AI CRM Assistant. How can I help you today?'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSendMessage = async text => {\n    const newUserMessage = {\n      id: uuidv4(),\n      sender: 'You',\n      text: text\n    };\n    setMessages(prevMessages => [...prevMessages, newUserMessage]);\n    setIsLoading(true);\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: text,\n          include_sql: true,\n          include_results: true\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to get response from API.');\n      }\n      const data = await response.json();\n      console.log(\"API Response:\", data);\n      let aiMessageContent = {};\n      if (data.success) {\n        aiMessageContent.text = data.response;\n        if (data.formatted_results && data.formatted_results.length > 0) {\n          const userQueryLower = text.toLowerCase();\n          const isQuoteQuery = userQueryLower.includes(\"quote\") || userQueryLower.includes(\"quotation\");\n          if (isQuoteQuery) {\n            aiMessageContent.quoteDetails = data.formatted_results[0];\n          }\n        }\n      } else {\n        aiMessageContent.text = data.error || \"An error occurred on the server.\";\n        console.error(\"Backend Error:\", data.error);\n      }\n      const newAiMessage = {\n        id: uuidv4(),\n        sender: 'AI',\n        ...aiMessageContent\n      };\n      setMessages(prevMessages => [...prevMessages, newAiMessage]);\n    } catch (error) {\n      console.error('Error sending message to API:', error);\n      const errorMessage = {\n        id: uuidv4(),\n        sender: 'AI',\n        text: `I'm sorry, I couldn't connect to the backend or process your request. Please try again. Error: ${error instanceof Error ? error.message : String(error)}`\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-3xl h-[85vh] mx-auto my-5 border-none rounded-lg flex flex-col shadow-2xl bg-white overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      title: \"AI CRM Assistant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow overflow-y-auto p-2.5 bg-gray-100 border-b border-gray-200\",\n      children: [messages.map(msg => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: msg\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-start m-2 opacity-80\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-200 p-3 rounded-2xl max-w-[75%] text-gray-800 italic\",\n          children: \"AI is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContainer, \"GG1KrWC9wmk1kzThml/uKkQlZXw=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatHeader","MessageBubble","UserInput","v4","uuidv4","jsxDEV","_jsxDEV","API_URL","ChatContainer","_s","messages","setMessages","id","sender","text","isLoading","setIsLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","newUserMessage","prevMessages","response","fetch","method","headers","body","JSON","stringify","query","include_sql","include_results","ok","errorData","json","Error","detail","data","console","log","aiMessageContent","success","formatted_results","length","userQueryLower","toLowerCase","isQuoteQuery","includes","quoteDetails","error","newAiMessage","errorMessage","message","String","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","ref","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/Admin/sql_ui/src/components/ChatContainer.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ChatHeader from './ChatHeader';\r\nimport MessageBubble from './MessageBubble';\r\nimport UserInput from './UserInput';\r\nimport { Message, QuoteDisplayProps } from '../types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst API_URL = 'http://localhost:8000/query';\r\n\r\nconst ChatContainer: React.FC = () => {\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: uuidv4(),\r\n      sender: 'AI',\r\n      text: 'Hello! I am your AI CRM Assistant. How can I help you today?',\r\n    },\r\n  ]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (text: string) => {\r\n    const newUserMessage: Message = {\r\n      id: uuidv4(),\r\n      sender: 'You',\r\n      text: text,\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, newUserMessage]);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          query: text,\r\n          include_sql: true,\r\n          include_results: true,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Failed to get response from API.');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"API Response:\", data);\r\n\r\n      let aiMessageContent: Partial<Message> = {};\r\n\r\n      if (data.success) {\r\n        aiMessageContent.text = data.response;\r\n\r\n        if (data.formatted_results && data.formatted_results.length > 0) {\r\n          const userQueryLower = text.toLowerCase();\r\n          const isQuoteQuery = userQueryLower.includes(\"quote\") || userQueryLower.includes(\"quotation\");\r\n\r\n          if (isQuoteQuery) {\r\n            aiMessageContent.quoteDetails = data.formatted_results[0];\r\n          }\r\n        }\r\n      } else {\r\n        aiMessageContent.text = data.error || \"An error occurred on the server.\";\r\n        console.error(\"Backend Error:\", data.error);\r\n      }\r\n\r\n      const newAiMessage: Message = {\r\n        id: uuidv4(),\r\n        sender: 'AI',\r\n        ...aiMessageContent,\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, newAiMessage]);\r\n    } catch (error) {\r\n      console.error('Error sending message to API:', error);\r\n      const errorMessage: Message = {\r\n        id: uuidv4(),\r\n        sender: 'AI',\r\n        text: `I'm sorry, I couldn't connect to the backend or process your request. Please try again. Error: ${error instanceof Error ? error.message : String(error)}`,\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-3xl h-[85vh] mx-auto my-5 border-none rounded-lg flex flex-col shadow-2xl bg-white overflow-hidden\">\r\n      <ChatHeader title=\"AI CRM Assistant\" />\r\n      <div className=\"flex-grow overflow-y-auto p-2.5 bg-gray-100 border-b border-gray-200\">\r\n        {messages.map((msg) => (\r\n          <MessageBubble key={msg.id} message={msg} />\r\n        ))}\r\n        {isLoading && (\r\n          <div className=\"flex justify-start m-2 opacity-80\">\r\n            <div className=\"bg-gray-200 p-3 rounded-2xl max-w-[75%] text-gray-800 italic\">\r\n              AI is typing...\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <UserInput onSendMessage={handleSendMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}