{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\sql_ui\\\\src\\\\components\\\\ChatContainer.tsx\",\n  _s = $RefreshSig$();\n// src/components/ChatContainer.tsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatHeader from './ChatHeader';\nimport MessageBubble from './MessageBubble';\nimport UserInput from './UserInput';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define the API endpoint for your backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8000/query'; // Make sure this matches your FastAPI server address and port\n\nconst ChatContainer = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: uuidv4(),\n    sender: 'AI',\n    text: 'Hello! I am your AI CRM Assistant. How can I help you today?'\n  }]);\n  const [isLoading, setIsLoading] = useState(false); // State for loading indicator\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleSendMessage = async text => {\n    // Add user's message to chat\n    const newUserMessage = {\n      id: uuidv4(),\n      sender: 'You',\n      text: text\n    };\n    setMessages(prevMessages => [...prevMessages, newUserMessage]);\n    setIsLoading(true); // Show loading indicator\n\n    try {\n      // Make the API call to your FastAPI backend\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: text,\n          include_sql: true,\n          // Request SQL for debugging/display if needed\n          include_results: true // Request raw SQL results\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to get response from API.');\n      }\n      const data = await response.json();\n      console.log(\"API Response:\", data); // Log the full API response for debugging\n\n      let aiMessageText;\n      if (data.success) {\n        // The AI's 'response' field should now contain the fully formatted text (including Markdown)\n        aiMessageText = data.response;\n\n        // *** IMPORTANT: Remove or comment out the manual quoteDetails parsing logic. ***\n        // The LLM in the backend is now responsible for formatting this within `data.response`.\n        // The QuoteDisplay component in MessageBubble can also be removed if it's no longer needed.\n        /*\r\n        if (data.sql_results && data.sql_results.length > 0) {\r\n            const userQueryLower = text.toLowerCase();\r\n            const isQuoteQuery = userQueryLower.includes(\"quote\") || userQueryLower.includes(\"quotation\");\r\n              if (isQuoteQuery && data.sql_results[0]) {\r\n                const firstResult = data.sql_results[0];\r\n                try {\r\n                    const parsedQuote: QuoteDisplayProps = {\r\n                        quotationNumber: String(firstResult.quotation_id || firstResult.id || 'N/A'),\r\n                        status: String(firstResult.status || 'N/A'),\r\n                        date: String(firstResult.date || firstResult.order_date || 'N/A'),\r\n                        totalAmount: parseFloat(firstResult.total_amount || firstResult.order_value || 0).toFixed(2) as unknown as number,\r\n                        items: [],\r\n                        leadInfo: String(firstResult.lead_name || firstResult.customer_name || 'N/A')\r\n                    };\r\n                      if (firstResult.items && Array.isArray(firstResult.items)) {\r\n                        parsedQuote.items = firstResult.items.map((item: any) => ({\r\n                            itemID: String(item.item_id || 'N/A'),\r\n                            units: parseFloat(item.units || 0),\r\n                            unitPrice: parseFloat(item.unit_price || 0),\r\n                            total: parseFloat(item.total || 0)\r\n                        }));\r\n                    } else {\r\n                        parsedQuote.items.push({ itemID: \"N/A\", units: 0, unitPrice: 0, total: 0 });\r\n                    }\r\n                      if (firstResult.revision_number && firstResult.revision_number > 0) {\r\n                        parsedQuote.isRevision = true;\r\n                    }\r\n                    \r\n                    // This part is what we are removing, as the AI's 'text' will contain the formatted data\r\n                    // aiMessageContent.quoteDetails = parsedQuote; \r\n                } catch (parseError) {\r\n                    console.error(\"Error parsing quote details from API response:\", parseError);\r\n                    aiMessageText += \"\\n(Note: Could not fully parse quote details for display.)\";\r\n                }\r\n            }\r\n        }\r\n        */\n      } else {\n        // If data.success is false, it means the backend reported an error\n        aiMessageText = data.error || \"An error occurred on the server.\";\n        console.error(\"Backend Error:\", data.error);\n      }\n\n      // Add AI's response to chat\n      const newAiMessage = {\n        id: uuidv4(),\n        sender: 'AI',\n        text: aiMessageText // Simply assign the formatted text\n      };\n      setMessages(prevMessages => [...prevMessages, newAiMessage]);\n    } catch (error) {\n      console.error('Error sending message to API:', error);\n      const errorMessage = {\n        id: uuidv4(),\n        sender: 'AI',\n        text: `I'm sorry, I couldn't connect to the backend or process your request. Please try again. Error: ${error instanceof Error ? error.message : String(error)}`\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsLoading(false); // Hide loading indicator\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '750px',\n      height: '85vh',\n      margin: '20px auto',\n      border: 'none',\n      borderRadius: '8px',\n      display: 'flex',\n      flexDirection: 'column',\n      boxShadow: '0 8px 25px rgba(0,0,0,0.25)',\n      backgroundColor: 'white',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      title: \"AI CRM Assistant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: 1,\n        overflowY: 'auto',\n        padding: '10px 0',\n        backgroundColor: '#f8f9fa',\n        borderBottom: '1px solid #e0e0e0'\n      },\n      children: [messages.map(msg => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: msg\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'flex-start',\n          margin: '8px 15px',\n          opacity: 0.8\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: '#e9ecef',\n            padding: '12px 16px',\n            borderRadius: '18px',\n            maxWidth: '75%',\n            color: '#212529',\n            fontStyle: 'italic'\n          },\n          children: \"AI is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContainer, \"GG1KrWC9wmk1kzThml/uKkQlZXw=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatHeader","MessageBubble","UserInput","v4","uuidv4","jsxDEV","_jsxDEV","API_URL","ChatContainer","_s","messages","setMessages","id","sender","text","isLoading","setIsLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","newUserMessage","prevMessages","response","fetch","method","headers","body","JSON","stringify","query","include_sql","include_results","ok","errorData","json","Error","detail","data","console","log","aiMessageText","success","error","newAiMessage","errorMessage","message","String","style","width","maxWidth","height","margin","border","borderRadius","display","flexDirection","boxShadow","backgroundColor","overflow","children","title","fileName","_jsxFileName","lineNumber","columnNumber","flexGrow","overflowY","padding","borderBottom","map","msg","justifyContent","opacity","color","fontStyle","ref","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/Admin/sql_ui/src/components/ChatContainer.tsx"],"sourcesContent":["// src/components/ChatContainer.tsx\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ChatHeader from './ChatHeader';\r\nimport MessageBubble from './MessageBubble';\r\nimport UserInput from './UserInput';\r\nimport { Message } from '../types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Define the API endpoint for your backend\r\nconst API_URL = 'http://localhost:8000/query'; // Make sure this matches your FastAPI server address and port\r\n\r\nconst ChatContainer: React.FC = () => {\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: uuidv4(),\r\n      sender: 'AI',\r\n      text: 'Hello! I am your AI CRM Assistant. How can I help you today?',\r\n    },\r\n  ]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false); // State for loading indicator\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (text: string) => {\r\n    // Add user's message to chat\r\n    const newUserMessage: Message = {\r\n      id: uuidv4(),\r\n      sender: 'You',\r\n      text: text,\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, newUserMessage]);\r\n    setIsLoading(true); // Show loading indicator\r\n\r\n    try {\r\n      // Make the API call to your FastAPI backend\r\n      const response = await fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          query: text,\r\n          include_sql: true, // Request SQL for debugging/display if needed\r\n          include_results: true, // Request raw SQL results\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Failed to get response from API.');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"API Response:\", data); // Log the full API response for debugging\r\n\r\n      let aiMessageText: string;\r\n\r\n      if (data.success) {\r\n        // The AI's 'response' field should now contain the fully formatted text (including Markdown)\r\n        aiMessageText = data.response;\r\n\r\n        // *** IMPORTANT: Remove or comment out the manual quoteDetails parsing logic. ***\r\n        // The LLM in the backend is now responsible for formatting this within `data.response`.\r\n        // The QuoteDisplay component in MessageBubble can also be removed if it's no longer needed.\r\n        /*\r\n        if (data.sql_results && data.sql_results.length > 0) {\r\n            const userQueryLower = text.toLowerCase();\r\n            const isQuoteQuery = userQueryLower.includes(\"quote\") || userQueryLower.includes(\"quotation\");\r\n\r\n            if (isQuoteQuery && data.sql_results[0]) {\r\n                const firstResult = data.sql_results[0];\r\n                try {\r\n                    const parsedQuote: QuoteDisplayProps = {\r\n                        quotationNumber: String(firstResult.quotation_id || firstResult.id || 'N/A'),\r\n                        status: String(firstResult.status || 'N/A'),\r\n                        date: String(firstResult.date || firstResult.order_date || 'N/A'),\r\n                        totalAmount: parseFloat(firstResult.total_amount || firstResult.order_value || 0).toFixed(2) as unknown as number,\r\n                        items: [],\r\n                        leadInfo: String(firstResult.lead_name || firstResult.customer_name || 'N/A')\r\n                    };\r\n\r\n                    if (firstResult.items && Array.isArray(firstResult.items)) {\r\n                        parsedQuote.items = firstResult.items.map((item: any) => ({\r\n                            itemID: String(item.item_id || 'N/A'),\r\n                            units: parseFloat(item.units || 0),\r\n                            unitPrice: parseFloat(item.unit_price || 0),\r\n                            total: parseFloat(item.total || 0)\r\n                        }));\r\n                    } else {\r\n                        parsedQuote.items.push({ itemID: \"N/A\", units: 0, unitPrice: 0, total: 0 });\r\n                    }\r\n\r\n                    if (firstResult.revision_number && firstResult.revision_number > 0) {\r\n                        parsedQuote.isRevision = true;\r\n                    }\r\n                    \r\n                    // This part is what we are removing, as the AI's 'text' will contain the formatted data\r\n                    // aiMessageContent.quoteDetails = parsedQuote; \r\n                } catch (parseError) {\r\n                    console.error(\"Error parsing quote details from API response:\", parseError);\r\n                    aiMessageText += \"\\n(Note: Could not fully parse quote details for display.)\";\r\n                }\r\n            }\r\n        }\r\n        */\r\n      } else {\r\n        // If data.success is false, it means the backend reported an error\r\n        aiMessageText = data.error || \"An error occurred on the server.\";\r\n        console.error(\"Backend Error:\", data.error);\r\n      }\r\n\r\n      // Add AI's response to chat\r\n      const newAiMessage: Message = {\r\n        id: uuidv4(),\r\n        sender: 'AI',\r\n        text: aiMessageText, // Simply assign the formatted text\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, newAiMessage]);\r\n\r\n    } catch (error) {\r\n      console.error('Error sending message to API:', error);\r\n      const errorMessage: Message = {\r\n        id: uuidv4(),\r\n        sender: 'AI',\r\n        text: `I'm sorry, I couldn't connect to the backend or process your request. Please try again. Error: ${error instanceof Error ? error.message : String(error)}`,\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false); // Hide loading indicator\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      width: '100%',\r\n      maxWidth: '750px',\r\n      height: '85vh',\r\n      margin: '20px auto',\r\n      border: 'none',\r\n      borderRadius: '8px',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      boxShadow: '0 8px 25px rgba(0,0,0,0.25)',\r\n      backgroundColor: 'white',\r\n      overflow: 'hidden'\r\n    }}>\r\n      <ChatHeader title=\"AI CRM Assistant\" />\r\n      <div style={{\r\n        flexGrow: 1,\r\n        overflowY: 'auto',\r\n        padding: '10px 0',\r\n        backgroundColor: '#f8f9fa',\r\n        borderBottom: '1px solid #e0e0e0'\r\n      }}>\r\n        {messages.map((msg) => (\r\n          <MessageBubble key={msg.id} message={msg} />\r\n        ))}\r\n        {isLoading && (\r\n          <div style={{\r\n            display: 'flex',\r\n            justifyContent: 'flex-start',\r\n            margin: '8px 15px',\r\n            opacity: 0.8\r\n          }}>\r\n            <div style={{\r\n              backgroundColor: '#e9ecef',\r\n              padding: '12px 16px',\r\n              borderRadius: '18px',\r\n              maxWidth: '75%',\r\n              color: '#212529',\r\n              fontStyle: 'italic'\r\n            }}>\r\n              AI is typing...\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <UserInput onSendMessage={handleSendMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,SAAS,MAAM,aAAa;AAEnC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,6BAA6B,CAAC,CAAC;;AAE/C,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAY,CAClD;IACEe,EAAE,EAAER,MAAM,CAAC,CAAC;IACZS,MAAM,EAAE,IAAI;IACZC,IAAI,EAAE;EACR,CAAC,CACF,CAAC;EACF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAU,KAAK,CAAC,CAAC,CAAC;EAC5D,MAAMoB,cAAc,GAAGlB,MAAM,CAAiB,IAAI,CAAC;EAEnD,MAAMmB,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA;IAC3B,CAAAA,qBAAA,GAAAF,cAAc,CAACG,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC;EAEDxB,SAAS,CAAC,MAAM;IACdoB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC;EAEd,MAAMa,iBAAiB,GAAG,MAAOT,IAAY,IAAK;IAChD;IACA,MAAMU,cAAuB,GAAG;MAC9BZ,EAAE,EAAER,MAAM,CAAC,CAAC;MACZS,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEA;IACR,CAAC;IACDH,WAAW,CAAEc,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,cAAc,CAAC,CAAC;IAChER,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEpB,IAAI;MACF;MACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAACpB,OAAO,EAAE;QACpCqB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAEnB,IAAI;UACXoB,WAAW,EAAE,IAAI;UAAE;UACnBC,eAAe,EAAE,IAAI,CAAE;QACzB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,MAAM,IAAI,kCAAkC,CAAC;MACzE;MAEA,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClCI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC,CAAC,CAAC;;MAEpC,IAAIG,aAAqB;MAEzB,IAAIH,IAAI,CAACI,OAAO,EAAE;QAChB;QACAD,aAAa,GAAGH,IAAI,CAACf,QAAQ;;QAE7B;QACA;QACA;QACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAIM,CAAC,MAAM;QACL;QACAkB,aAAa,GAAGH,IAAI,CAACK,KAAK,IAAI,kCAAkC;QAChEJ,OAAO,CAACI,KAAK,CAAC,gBAAgB,EAAEL,IAAI,CAACK,KAAK,CAAC;MAC7C;;MAEA;MACA,MAAMC,YAAqB,GAAG;QAC5BnC,EAAE,EAAER,MAAM,CAAC,CAAC;QACZS,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE8B,aAAa,CAAE;MACvB,CAAC;MACDjC,WAAW,CAAEc,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEsB,YAAY,CAAC,CAAC;IAEhE,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAME,YAAqB,GAAG;QAC5BpC,EAAE,EAAER,MAAM,CAAC,CAAC;QACZS,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE,kGAAkGgC,KAAK,YAAYP,KAAK,GAAGO,KAAK,CAACG,OAAO,GAAGC,MAAM,CAACJ,KAAK,CAAC;MAChK,CAAC;MACDnC,WAAW,CAAEc,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEuB,YAAY,CAAC,CAAC;IAChE,CAAC,SAAS;MACRhC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;EAED,oBACEV,OAAA;IAAK6C,KAAK,EAAE;MACVC,KAAK,EAAE,MAAM;MACbC,QAAQ,EAAE,OAAO;MACjBC,MAAM,EAAE,MAAM;MACdC,MAAM,EAAE,WAAW;MACnBC,MAAM,EAAE,MAAM;MACdC,YAAY,EAAE,KAAK;MACnBC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,SAAS,EAAE,6BAA6B;MACxCC,eAAe,EAAE,OAAO;MACxBC,QAAQ,EAAE;IACZ,CAAE;IAAAC,QAAA,gBACAzD,OAAA,CAACN,UAAU;MAACgE,KAAK,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvC9D,OAAA;MAAK6C,KAAK,EAAE;QACVkB,QAAQ,EAAE,CAAC;QACXC,SAAS,EAAE,MAAM;QACjBC,OAAO,EAAE,QAAQ;QACjBV,eAAe,EAAE,SAAS;QAC1BW,YAAY,EAAE;MAChB,CAAE;MAAAT,QAAA,GACCrD,QAAQ,CAAC+D,GAAG,CAAEC,GAAG,iBAChBpE,OAAA,CAACL,aAAa;QAAcgD,OAAO,EAAEyB;MAAI,GAArBA,GAAG,CAAC9D,EAAE;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAC5C,CAAC,EACDrD,SAAS,iBACRT,OAAA;QAAK6C,KAAK,EAAE;UACVO,OAAO,EAAE,MAAM;UACfiB,cAAc,EAAE,YAAY;UAC5BpB,MAAM,EAAE,UAAU;UAClBqB,OAAO,EAAE;QACX,CAAE;QAAAb,QAAA,eACAzD,OAAA;UAAK6C,KAAK,EAAE;YACVU,eAAe,EAAE,SAAS;YAC1BU,OAAO,EAAE,WAAW;YACpBd,YAAY,EAAE,MAAM;YACpBJ,QAAQ,EAAE,KAAK;YACfwB,KAAK,EAAE,SAAS;YAChBC,SAAS,EAAE;UACb,CAAE;UAAAf,QAAA,EAAC;QAEH;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,eACD9D,OAAA;QAAKyE,GAAG,EAAE9D;MAAe;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACN9D,OAAA,CAACJ,SAAS;MAAC8E,aAAa,EAAEzD;IAAkB;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV,CAAC;AAAC3D,EAAA,CAjLID,aAAuB;AAAAyE,EAAA,GAAvBzE,aAAuB;AAmL7B,eAAeA,aAAa;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}