{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\sql_ui\\\\src\\\\components\\\\ChatContainer.tsx\",\n  _s = $RefreshSig$();\n// src/components/ChatContainer.tsx\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatHeader from './ChatHeader';\nimport MessageBubble from './MessageBubble';\nimport UserInput from './UserInput';\nimport { v4 as uuidv4 } from 'uuid'; // For generating unique IDs for messages.\n// Install: npm install uuid @types/uuid\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContainer = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: uuidv4(),\n    // Unique ID for this message\n    sender: 'AI',\n    text: 'Hello! I am your AI CRM Assistant. How can I help you today?'\n  }, {\n    id: uuidv4(),\n    sender: 'You',\n    text: 'Show me the quotes related to lead LD00049'\n  }, {\n    id: uuidv4(),\n    sender: 'AI',\n    text: 'Certainly! Here are the quotes related to lead LD00049 for Kumaran Hospital:',\n    quoteDetails: {\n      // This object will be passed to QuoteDisplay component\n      quotationNumber: 'QOT001',\n      status: 'Pending',\n      date: 'July 12, 2025',\n      totalAmount: 2000.00,\n      // Make sure to use correct numeric type\n      items: [{\n        itemID: '101',\n        units: 2,\n        unitPrice: 250.00,\n        total: 500.00\n      }, {\n        itemID: '102',\n        units: 1,\n        unitPrice: 1500.00,\n        total: 1500.00\n      }],\n      leadInfo: 'for Kumaran Hospital'\n    }\n  }, {\n    id: uuidv4(),\n    sender: 'AI',\n    text: 'Quotation: QOT002 (Revision)' // This is rendered as a simple text message\n  }\n  // You can add more initial messages here as needed for testing\n  ]);\n  const messagesEndRef = useRef(null); // Ref for scrolling to the latest message\n\n  // Function to scroll to the bottom of the chat window\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // Effect hook to scroll to bottom whenever messages array changes\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Handler for sending new messages from the UserInput component\n  const handleSendMessage = text => {\n    const newMessage = {\n      id: uuidv4(),\n      sender: 'You',\n      text: text\n    };\n    // Add the user's message to the state\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n\n    // In a real application, you would make an API call here to your backend/AI.\n    // For demonstration purposes, we'll simulate an AI response after a short delay.\n    setTimeout(() => {\n      const aiResponse = {\n        id: uuidv4(),\n        sender: 'AI',\n        text: `AI says: \"${text}\". (This is a simulated response. Your actual AI response would go here.)`\n      };\n      setMessages(prevMessages => [...prevMessages, aiResponse]);\n    }, 1000); // Simulate a 1-second delay for AI response\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      maxWidth: '800px',\n      // Max width of the chat container\n      height: '80vh',\n      // 80% of viewport height\n      margin: '20px auto',\n      // Center the container horizontally\n      border: '1px solid #ddd',\n      // Light border\n      borderRadius: '8px',\n      // Rounded corners for the entire container\n      display: 'flex',\n      flexDirection: 'column',\n      // Stack children vertically\n      boxShadow: '0 4px 8px rgba(0,0,0,0.2)',\n      // Larger shadow for the container\n      backgroundColor: 'white',\n      overflow: 'hidden' // Important to clip content within border-radius\n    },\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      title: \"AI CRM Assistant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: 1,\n        // Allows this div to take up all available space\n        overflowY: 'auto',\n        // Enables vertical scrolling for messages\n        padding: '10px 0',\n        // Vertical padding\n        backgroundColor: '#f0f2f5' // Light background for chat area\n      },\n      children: [messages.map(msg => /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: msg\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) // Render each message using MessageBubble\n      ), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContainer, \"Crf0EfChAazEPSfjLfeaiTqpYYg=\");\n_c = ChatContainer;\nexport default ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatHeader","MessageBubble","UserInput","v4","uuidv4","jsxDEV","_jsxDEV","ChatContainer","_s","messages","setMessages","id","sender","text","quoteDetails","quotationNumber","status","date","totalAmount","items","itemID","units","unitPrice","total","leadInfo","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","newMessage","prevMessages","setTimeout","aiResponse","style","width","maxWidth","height","margin","border","borderRadius","display","flexDirection","boxShadow","backgroundColor","overflow","children","title","fileName","_jsxFileName","lineNumber","columnNumber","flexGrow","overflowY","padding","map","msg","message","ref","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/Admin/sql_ui/src/components/ChatContainer.tsx"],"sourcesContent":["// src/components/ChatContainer.tsx\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport ChatHeader from './ChatHeader';\r\nimport MessageBubble from './MessageBubble';\r\nimport UserInput from './UserInput';\r\nimport { Message, QuoteDisplayProps } from '../types';\r\nimport { v4 as uuidv4 } from 'uuid'; // For generating unique IDs for messages.\r\n                                    // Install: npm install uuid @types/uuid\r\n\r\nconst ChatContainer: React.FC = () => {\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: uuidv4(), // Unique ID for this message\r\n      sender: 'AI',\r\n      text: 'Hello! I am your AI CRM Assistant. How can I help you today?',\r\n    },\r\n    {\r\n      id: uuidv4(),\r\n      sender: 'You',\r\n      text: 'Show me the quotes related to lead LD00049',\r\n    },\r\n    {\r\n      id: uuidv4(),\r\n      sender: 'AI',\r\n      text: 'Certainly! Here are the quotes related to lead LD00049 for Kumaran Hospital:',\r\n      quoteDetails: { // This object will be passed to QuoteDisplay component\r\n        quotationNumber: 'QOT001',\r\n        status: 'Pending',\r\n        date: 'July 12, 2025',\r\n        totalAmount: 2000.00, // Make sure to use correct numeric type\r\n        items: [\r\n          { itemID: '101', units: 2, unitPrice: 250.00, total: 500.00 },\r\n          { itemID: '102', units: 1, unitPrice: 1500.00, total: 1500.00 },\r\n        ],\r\n        leadInfo: 'for Kumaran Hospital',\r\n      },\r\n    },\r\n    {\r\n      id: uuidv4(),\r\n      sender: 'AI',\r\n      text: 'Quotation: QOT002 (Revision)', // This is rendered as a simple text message\r\n    },\r\n    // You can add more initial messages here as needed for testing\r\n  ]);\r\n\r\n  const messagesEndRef = useRef<HTMLDivElement>(null); // Ref for scrolling to the latest message\r\n\r\n  // Function to scroll to the bottom of the chat window\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  // Effect hook to scroll to bottom whenever messages array changes\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // Handler for sending new messages from the UserInput component\r\n  const handleSendMessage = (text: string) => {\r\n    const newMessage: Message = {\r\n      id: uuidv4(),\r\n      sender: 'You',\r\n      text: text,\r\n    };\r\n    // Add the user's message to the state\r\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n\r\n    // In a real application, you would make an API call here to your backend/AI.\r\n    // For demonstration purposes, we'll simulate an AI response after a short delay.\r\n    setTimeout(() => {\r\n      const aiResponse: Message = {\r\n        id: uuidv4(),\r\n        sender: 'AI',\r\n        text: `AI says: \"${text}\". (This is a simulated response. Your actual AI response would go here.)`,\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, aiResponse]);\r\n    }, 1000); // Simulate a 1-second delay for AI response\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      width: '100%',\r\n      maxWidth: '800px', // Max width of the chat container\r\n      height: '80vh', // 80% of viewport height\r\n      margin: '20px auto', // Center the container horizontally\r\n      border: '1px solid #ddd', // Light border\r\n      borderRadius: '8px', // Rounded corners for the entire container\r\n      display: 'flex',\r\n      flexDirection: 'column', // Stack children vertically\r\n      boxShadow: '0 4px 8px rgba(0,0,0,0.2)', // Larger shadow for the container\r\n      backgroundColor: 'white',\r\n      overflow: 'hidden' // Important to clip content within border-radius\r\n    }}>\r\n      <ChatHeader title=\"AI CRM Assistant\" /> {/* Render the header */}\r\n      <div style={{\r\n        flexGrow: 1, // Allows this div to take up all available space\r\n        overflowY: 'auto', // Enables vertical scrolling for messages\r\n        padding: '10px 0', // Vertical padding\r\n        backgroundColor: '#f0f2f5' // Light background for chat area\r\n      }}>\r\n        {messages.map((msg) => (\r\n          <MessageBubble key={msg.id} message={msg} /> // Render each message using MessageBubble\r\n        ))}\r\n        <div ref={messagesEndRef} /> {/* Invisible div at the end for scrolling */}\r\n      </div>\r\n      <UserInput onSendMessage={handleSendMessage} /> {/* Render the input field */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}